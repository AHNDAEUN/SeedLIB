<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.seed.lib.book.loan.BookLoanMapper">
	
	<!-- 대출하면 책 대출count update -->
	<update id="setCountUpdate" parameterType="BookVO">
		UPDATE BOOK
			SET BOOKCOUNT = #{bookCount}
		WHERE ISBN = #{isbn}
	</update>
	
	<!-- 보유 권수 계산 -->
	<select id="getQuan" parameterType="BookLibVO" resultType="Integer">
		SELECT QUANTITY FROM BOOKLIB WHERE LIBNUM = #{libNum} AND ISBN = #{isbn}
	</select>
	
	<!-- 도서 대출,반납하면 도서관이 보유하고 있는 권수 -1 -->
	<update id="setQuanUpdate" parameterType="BookLibVO">
		UPDATE BOOKLIB
			SET QUANTITY = #{quantity}
		WHERE ISBN = #{isbn} AND LIBNUM = #{libNum}
	</update>
	
	<!-- 보유 권수가 0/1일때 able update -->
	<update id="setAbleUpdate" parameterType="BookLibVO">
		UPDATE BOOKLIB
			SET ABLE = #{able}
		WHERE ISBN = #{isbn} AND LIBNUM = #{libNum}
	</update>
	
	
	
	<!-- 대출 가능한 회원인지? - 해당 도서 대출 중인지 -->
	<select id="getBookLoan" parameterType="BookLoanVO" resultType="Integer">
		SELECT COUNT(LOANNUM) FROM LOAN WHERE USERNAME = #{userName} AND ISBN = #{isbn}
	</select>
	
	
	<!-- 대출 신청 -->
	<insert id="setLoan" parameterType="BookLoanVO">
		INSERT INTO LOAN(USERNAME, ISBN, LOANSDATE, LOANLDATE, OVERDUE, RTSTATUS)
			VALUES (#{userName}, #{isbn}, now(), 0000, 0, 0)
	</insert>
	
	
	<!-- 대출 목록 -->
	<!-- rtStatus가 1이면 대출 중 | 0이면 대출 이력 -->
	<select id="getLoanList" parameterType="BookLoanPager" resultMap="LoanResult">
		SELECT L.*, B.*
			FROM LOAN L
				INNER JOIN BOOK B
				ON B.ISBN = L.ISBN
		
			WHERE L.USERNAME = #{userName}
				AND RTSTATUS = #{rtStatus}
				AND B.TITLE LIKE CONCAT ('%', #{title}, '%')
				AND B.WRITER LIKE CONCAT ('%', #{writer}, '%')
				<if test="dateA != null and dateB != null">
					AND L.REGDATE BETWEEN #{dateA} AND #{dateB}
				</if>
			ORDER BY
			<choose>
				<when test="select == 'title'">B.TITLE</when>
				<when test="select == 'isbn'">B.ISBN</when>
				<otherwise>L.LOANNUM</otherwise>
			</choose>
			<choose>
				<when test="sort == 'desc'">DESC</when>
				<otherwise>ASC</otherwise>
			</choose>
			LIMIT #{startRow}, #{perPage};
	</select>
	
	<resultMap type="BookVO" id="LoanResult">
		<id column="isbn" property="isbn"/>
			<result column="title" property="title"/>
			<result column="writer" property="writer"/>
			<result column="image" property="image"/>
		<collection property="loanVOs" javaType="List" ofType="BookLoanVO">
			<id column="loanNum" property="loanNum"/>
			<result column="userName" property="userName"/>
			<result column="loanSDate" property="loanSDate"/>
			<result column="loanLDate" property="loanLDate"/>
			<result column="overdue" property="overdue"/>
			<result column="rtStatus" property="rtStatus"/>
			<result column="extension" property="extension"/>
		</collection>	
	</resultMap>
	
	
	<!-- 대출 연장 신청 가능? -->
	<select id="getExCount" parameterType="BookLoanVO" resultType="Integer">
		SELECT EXTENSION FROM LOAN WHERE USERNAME = #{userName} AND ISBN = #{isbn}
	</select>
	
	<!-- 대출 책 권수 -->
	<!-- 1은 대출 중 | 0은 반납 완 -->
	<select id="getLoanCount" parameterType="BookLoanVO" resultType="Integer">
		SELECT COUNT(LOANNUM) FROM LOAN WHERE USERNAME = #{userName} AND RTSTATUS = #{rtStatus}
	</select>
	
	<!-- 대출 연장 신청 -->
	<!-- 연장 횟수, 만기일 업데이트 -->
	<!-- <update id="setExtension">
	</update> -->
	
	<!-- ================================== -->
	
	<!-- 예약 신청 -->
	<insert id="setReservation" parameterType="BookLoanVO">
		INSERT INTO RESERVATION (ISBN, USERNAME, ENABLEDATE)
			VALUES (#{isbn}, #{userName}, #{enableDate})
	</insert>
	
	<!-- 예약 목록 -->
	<select id="getReList" parameterType="BookLoanPager" resultMap="ReResult">
		SELECT E.*, B.*
			FROM RESERVATION E
				INNER JOIN BOOK B
				ON B.ISBN = R.ISBN
		
			WHERE R.USERNAME = #{userName}
				AND B.TITLE LIKE CONCAT ('%', #{title}, '%')
				AND B.WRITER LIKE CONCAT ('%', #{writer}, '%')
				<if test="dateA != null and dateB != null">
					AND E.REGDATE BETWEEN #{dateA} AND #{dateB}
				</if>
			ORDER BY
			<choose>
				<when test="select == 'title'">B.TITLE</when>
				<otherwise>E.REGDATE</otherwise>
			</choose>
			<choose>
				<when test="sort == 'desc'">&#160;DESC</when>
				<otherwise>&#160;ASC</otherwise>
			</choose>
		LIMIT #{startRow}, #{lastRow}	
	</select>
	
	<resultMap type="BookVO" id="ReResult">
		<id column="isbn" property="isbn"/>
			<result column="title" property="title"/>
			<result column="writer" property="writer"/>
			<result column="image" property="image"/>
		<collection property="reVOs" javaType="List" ofType="BookReservationVO">
			<id column="rvNum" property="rvNum"/>
			<result column="userName" property="userName"/>
			<result column="enableDate" property="enableDate"/>
		</collection>	
	</resultMap>
	
	<!-- 예약 중인 책 권수 -->
	<select id="getReCount" parameterType="BookReservationVO" resultType="Integer">
		SELECT COUNT(RVNUM) FROM LOAN WHERE USERNAME = #{userName}
	</select>
	
	<!-- ================================== -->
	
	<!-- 상호대차 신청 -->
	<insert id="setMutual" parameterType="BookLoanVO">
		INSERT INTO MUTUALLOAN (ISBN, USERNAME)
			VALUES (#{isbn}, #{userName})
	</insert>
	
	<!-- 상호대차 목록 -->
	<select id="getMuList" parameterType="BookLoanPager" resultMap="MuResult">
		SELECT M.*, b.*
			FROM MUTUALLOAN M
				INNER JOIN BOOK B
				ON B.ISBN = M.ISBN
		
			WHERE M.USERNAME = #{userName}
				AND B.TITLE LIKE CONCAT ('%', #{title}, '%')
				AND B.WRITER LIKE CONCAT ('%', #{writer}, '%')
				<if test="dateA != null and dateB != null">
					AND M.REGDATE BETWEEN #{dateA} AND #{dateB}
				</if>
			ORDER BY
			<choose>
				<when test="select == 'title'">B.TITLE</when>
				<otherwise>M.REGDATE</otherwise>
			</choose>
			<choose>
				<when test="sort == 'desc'">&#160;DESC</when>
				<otherwise>&#160;ASC</otherwise>
			</choose>
		LIMIT #{startRow}, #{lastRow}	
	</select>
	
	<resultMap type="BookVO" id="MuResult">
		<id column="isbn" property="isbn"/>
			<result column="title" property="title"/>
			<result column="writer" property="writer"/>
			<result column="image" property="image"/>
		<collection property="muVOs" javaType="List" ofType="BookMutualLoanVO">
			<id column="loanNum" property="loanNum"/>
			<result column="userName" property="userName"/>
		</collection>	
	</resultMap>
	
	<!-- 상호대차 신청한 책 권수 -->
	<select id="getMuCount" parameterType="BookMutualLoanVO" resultType="Integer">
		SELECT COUNT(MUNUM) FROM LOAN WHERE USERNAME = #{userName}
	</select>
	
	<!-- FROM 페이지 별로 설정 -->
	<select id="getCount" resultType="Long" parameterType="BookLoanPager">
    	SELECT COUNT(ISBN) FROM LOAN WHERE USERNAME = #{userName}
	</select>
	
</mapper>